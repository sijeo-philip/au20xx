/*******************************************************************************
* Title                 :   common
* Filename              :   common.c
* Author                :   Sijeo Philip
* Origin Date           :   20/03/2020
* Version               :   1.0.0
* Compiler              :   mspx_eabi
* Target                :   MSP430FR6989
* Notes                 :   This module is used for common functions accross the application
*
* THIS SOFTWARE IS PROVIDED BY UNISEM ELECTRONICS "AS IS" AND ANY EXPRESSED
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL UNISEM ELECTRONICS OR ITS CONTRIBUTORS BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGE.
*
*******************************************************************************/
/*************** SOURCE REVISION LOG *****************************************
*
*    Date    Version   Author         Description
*  20/03/20   1.0.0    Sijeo Philip   Initial Release.
*
*******************************************************************************/
/** @file common.c
 *  @brief This is the source file for common functions such as delay
 *  and other string manipulations functions
 */
/******************************************************************************
* Includes
*******************************************************************************/
#include <stdint.h>             /* For portable types */

//TODO: UPDATE MY INCLUDE
#include "common.h"             /* For common functions such as delays */
#include "hal_fram.h"           /* For top variable address locations */
#include "hal_timerA.h"

/******************************************************************************
* Module Preprocessor Constants
*******************************************************************************/

/******************************************************************************
* Module Preprocessor Macros
*******************************************************************************/

/******************************************************************************
* Module Typedefs
*******************************************************************************/

/******************************************************************************
* Module Variable Definitions
*******************************************************************************/

/******************************************************************************
* Function Prototypes
*******************************************************************************/

/******************************************************************************
* Function Definitions
*******************************************************************************/

/******************************************************************************
* Function : delay_us()
*//**
* \b Description:
*
* This function is used to generate delay in micro seconds
*
*
* PRE-CONDITION: Clocks should be initialized for 1MHz Source
*
* POST-CONDITION: Delay in Microsecond is generated;
*
* @return       A pointer to the configuration table.
*
* \b Example Example:
* @code
*
*   delay_us(100)
* @endcode
*
* @see system_clock_init
*
* <br><b> - HISTORY OF CHANGES - </b>
*
* <table align="left" style="width:800px">
* <tr><td> Date       </td><td> Software Version </td><td> Initials </td><td> Description </td></tr>
* <tr><td> 20/03/2020 </td><td> 0.5.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void delay_us( uint16_t microseconds )
{
   static uint16_t i =0;
   for ( i = 0; i < microseconds; i ++ )
       __no_operation();
}


/******************************************************************************
* Function : get_top_variables
*//**
* \b Description:
*
* This function is used to read all the top variables from the memory store in a
* struct of type top_variables_t
*
* PRE-CONDITION: Clocks should be initialized for 1MHz Source
*
* POST-CONDITION: The data from FRAM is read
*
* @param[out]   values of top variables in a structure
*
* @return       None
*
* \b Example Example:
* @code
*  top_variables_t topVariable;
*  get_top_variable (&topVariable)
*
* @endcode
*
* @see system_clock_init
*
* <br><b> - HISTORY OF CHANGES - </b>
*
* <table align="left" style="width:800px">
* <tr><td> Date       </td><td> Software Version </td><td> Initials </td><td> Description </td></tr>
* <tr><td> 30/03/2020 </td><td> 0.5.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
bool get_top_variables(top_variables_t * topVariable)
{
    static bool retVal = false;
    retVal =  fram_read (&topVariable->samplesPerTemp , 4, SAMPLES_PER_TEMP_READ_ADDRESS);
    if( false == retVal )
        return retVal;
    set_samples_per_temperature_read( topVariable->samplesPerTemp);

    retVal =  fram_read(&topVariable->sensEnTime, 2, SAMPLE_TIME_ADD);
    if( false == retVal )
        return retVal;

    if( topVariable->sensEnTime > 3 )
    { topVariable->sensEnTime = 3 ; topVariable->sensEnTime_us = 384; }
    else
    {
        switch(topVariable->sensEnTime)
        {
        case 0:
            topVariable->sensEnTime_us = 48;
        break;
        case 1:
            topVariable->sensEnTime_us = 96;
        break;
        case 2:
            topVariable->sensEnTime_us = 192;
        break;
        case 3:
            topVariable->sensEnTime_us = 384;
        break;
        default:
            topVariable->sensEnTime_us = 384;
        break;
        }
    }
    retVal = fram_read(&topVariable->lastRotCount, 2, LAST_ROT_COUNT_ADD);
    if( false == retVal )
        return retVal;
    retVal = fram_read(&topVariable->sampleTime, 2, SAMPLE_TIME_ADD);
    if( false == retVal )
        return retVal;
    if ( (topVariable->sampleTime < 2) || (topVariable->sampleTime > 512))
        topVariable->sampleTime = 20;
    timerA_load_time(topVariable->sampleTime);
  return retVal;
}
/*************** END OF FUNCTIONS ***************************************************************************/
